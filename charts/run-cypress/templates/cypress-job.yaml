apiVersion: v1
kind: ServiceAccount
metadata:
  name: {{ .Release.Name }}-cypress-sa
  namespace: default
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: {{ .Release.Name }}-cypress-role
  namespace: default
rules:
  - apiGroups: [ "batch" ]
    resources: [ "jobs" ]
    verbs: [ "get", "list" ]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: {{ .Release.Name }}-cypress-rolebinding
  namespace: default
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: {{ .Release.Name }}-cypress-role
subjects:
  - kind: ServiceAccount
    name: {{ .Release.Name }}-cypress-sa
    namespace: default
---
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ .Release.Name }}-cypress
spec:
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}-cypress
    spec:
      serviceAccountName: {{ .Release.Name }}-cypress-sa
      imagePullSecrets:
        - name: cloudsmith-pull-secret
      restartPolicy: Never
      initContainers:
        - name: wait-for-migrations
          image: bitnami/kubectl:latest
          command:
            - sh
            - -c
            - |
              while true; do
                status=$(kubectl get job {{ .Release.Name }}-filler -o jsonpath='{.status.conditions[?(@.type=="Complete")].status}' 2>&1)
                if [ "$status" = "True" ]; then
                  echo "Filler job completed."
                  break
                elif echo "$status" | grep -q "NotFound"; then
                  echo "Filler job not found."
                else
                  echo "Waiting for filler job to complete..."
                fi
                sleep 2
              done
      containers:
        - name: {{ .Release.Name }}-cypress
          image: "{{ .Values.cypress.image.repository }}:{{ .Values.cypress.image.tag }}"
          imagePullPolicy: Always
          env:
            - name: TOKEN_URL
              valueFrom:
                configMapKeyRef:
                  name: app-config
                  key: TokenUrl
            - name: CLIENT_ID
              valueFrom:
                configMapKeyRef:
                  name: app-config
                  key: ClientId
            - name: CLIENT_SECRET
              valueFrom:
                configMapKeyRef:
                  name: app-config
                  key: ClientSecret
            - name: CLOUDSMITH_USER
              valueFrom:
                secretKeyRef:
                  name: cloudsmith-secret
                  key: username
            - name: CLOUDSMITH_PASS
              valueFrom:
                secretKeyRef:
                  name: cloudsmith-secret
                  key: password
            - name: activeMQHost
              value: "{{ .Release.Name }}-activemq"
            - name: activeMQPort
              value: "{{ .Values.activemq.service.adminPort }}"
            - name: mockserverHost
              value: "{{ .Release.Name }}-mockserver"
            - name: mockserverPort
              value: "{{ .Values.mockserver.service.port }}"
            - name: webServiceHost
              value: "{{ .Release.Name }}-webservice"
            - name: webServicePort
              value: "{{ .Values.webservice.service.httpPort }}"
          command: [ "/bin/sh", "-c", "./run-tests.sh" ]